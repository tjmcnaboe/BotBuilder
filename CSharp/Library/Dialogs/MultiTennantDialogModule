    public sealed class MultiTenantDialogModule : Module

    {

        public const string BlobKey = "DialogState";
        public static readonly object LifetimeScopeTag = typeof(MultiTenantDialogModule);
        public static readonly object Key_DeleteProfile_Regex = new object();

        public static ILifetimeScope BeginLifetimeScope(ILifetimeScope scope,MicrosoftAppCredentials creds, IMessageActivity message)
        {
            var inner = scope.BeginLifetimeScope(LifetimeScopeTag);
            inner.Resolve<IMessageActivity>(TypedParameter.From(message));
            inner.Resolve<MicrosoftAppCredentials>(TypedParameter.From(creds));
            return inner;
        }



        protected override void Load(ContainerBuilder builder)

        {

            base.Load(builder);



            builder.RegisterModule(new FiberModule<DialogTask>());



            // singleton components



            builder

                .Register(c => new ResourceManager("Microsoft.Bot.Builder.Resource.Resources", typeof(Microsoft.Bot.Builder.Resource.Resources).Assembly))

                .As<ResourceManager>()

                .SingleInstance();



            // every lifetime scope is driven by a message



            builder

                .Register((c, p) => p.TypedAs<IMessageActivity>())

                .AsSelf()

                .AsImplementedInterfaces()

                .InstancePerMatchingLifetimeScope(LifetimeScopeTag);



            // make the address and cookie available for the lifetime scope



            builder

                .Register(c => Address.FromActivity(c.Resolve<IActivity>()))

                .AsImplementedInterfaces()

                .InstancePerMatchingLifetimeScope(LifetimeScopeTag);



            builder

                .RegisterType<ResumptionCookie>()

                .AsSelf()

                .InstancePerMatchingLifetimeScope(LifetimeScopeTag);



            // components not marked as [Serializable]

            builder

                .RegisterType<MicrosoftAppCredentials>()

                .AsSelf()

                .InstancePerMatchingLifetimeScope(LifetimeScopeTag);



            builder

                // not resolving IEqualityComparer<IAddress> from container because it's a very local policy

                // and yet too broad of an interface.  could explore using tags for registration overrides.

                .Register(c => new LocalMutualExclusion<IAddress>(new ConversationAddressComparer()))

                .As<IScope<IAddress>>()

                .SingleInstance();



            builder

                .Register(c => new ConnectorClientFactory(c.Resolve<IAddress>(), c.Resolve<MicrosoftAppCredentials>()))

                .As<IConnectorClientFactory>()

                .InstancePerLifetimeScope();



            builder

                .Register(c => c.Resolve<IConnectorClientFactory>().MakeConnectorClient())

                .As<IConnectorClient>()

                .InstancePerLifetimeScope();



            builder

                .Register(c => c.Resolve<IConnectorClientFactory>().MakeStateClient())

                .As<IStateClient>()

                .InstancePerLifetimeScope();



            builder

               .Register(c => new DetectChannelCapability(c.Resolve<IAddress>()))

               .As<IDetectChannelCapability>()

               .InstancePerLifetimeScope();



            builder

                .Register(c => c.Resolve<IDetectChannelCapability>().Detect())

                .As<IChannelCapability>()

                .InstancePerLifetimeScope();



            builder.RegisterType<ConnectorStore>()

                .AsSelf()

                .InstancePerLifetimeScope();



            // If bot wants to use InMemoryDataStore instead of 

            // ConnectorStore, the below registration should be used 

            // as the inner IBotDataStore for CachingBotDataStore

            /*builder.RegisterType<InMemoryDataStore>()

                .AsSelf()

                .SingleInstance(); */



            builder.Register(c => new CachingBotDataStore(c.Resolve<ConnectorStore>(),

                                                          CachingBotDataStoreConsistencyPolicy.ETagBasedConsistency))

                .As<IBotDataStore<BotData>>()

                .AsSelf()

                .InstancePerLifetimeScope();



            builder

                .RegisterType<JObjectBotData>()

                .AsSelf()

                .InstancePerLifetimeScope();



            builder

                .Register(c => new DialogTaskManagerBotDataLoader(c.Resolve<JObjectBotData>(),

                                                 c.Resolve<IDialogTaskManager>()))

                .As<IBotData>()

                .InstancePerLifetimeScope();



            builder

            .Register((c, p) => new BotDataBagStream(p.TypedAs<IBotDataBag>(), p.TypedAs<string>()))

            .As<Stream>()

            .InstancePerDependency();



            builder.Register(c => new DialogTaskManager(MultiTenantDialogModule.BlobKey,

                                                        c.Resolve<JObjectBotData>(),

                                                        c.Resolve<IStackStoreFactory<DialogTask>>(),

                                                        c.Resolve<Func<IDialogStack, CancellationToken, IDialogContext>>()))

                .AsSelf()

                .As<IDialogTaskManager>()

                .InstancePerLifetimeScope();



            builder

                .RegisterType<DialogContext>()

                .As<IDialogContext>()

                .InstancePerDependency();





            builder

                .Register(c =>

                {

                    var cc = c.Resolve<IComponentContext>();



                    Func<string, IBotDataBag, IStore<IFiberLoop<DialogTask>>> make = (taskId, botDataBag) =>

                    {

                        var stream = cc.Resolve<Stream>(TypedParameter.From(botDataBag), TypedParameter.From(taskId));

                        return cc.Resolve<IStore<IFiberLoop<DialogTask>>>(TypedParameter.From(stream));

                    };



                    return make;

                })

                .As<Func<string, IBotDataBag, IStore<IFiberLoop<DialogTask>>>>()

                .InstancePerDependency();





            builder.Register(c => c.Resolve<IDialogTaskManager>().DialogTasks[0])

                .As<IDialogStack>()

                .As<IDialogTask>()

                .InstancePerLifetimeScope();





            // Scorable implementing "/deleteprofile"

            builder

                .Register(c => new Regex("^(\\s)*/deleteprofile", RegexOptions.Compiled | RegexOptions.IgnoreCase | RegexOptions.IgnorePatternWhitespace))

                .Keyed<Regex>(Key_DeleteProfile_Regex)

                .SingleInstance();



            builder

                .Register(c => new DeleteProfileScorable(c.Resolve<IDialogStack>(), c.Resolve<IBotData>(), c.Resolve<IBotToUser>(), c.ResolveKeyed<Regex>(Key_DeleteProfile_Regex)))

                .As<IScorable<IActivity, double>>()

                .InstancePerLifetimeScope();



            builder

                .Register(c =>

                {

                    var stack = c.Resolve<IDialogStack>();

                    var fromStack = stack.Frames.Select(f => f.Target).OfType<IScorable<IActivity, double>>();

                    var fromGlobal = c.Resolve<IScorable<IActivity, double>[]>();

                    // since the stack of scorables changes over time, this should be lazy

                    var lazyScorables = fromStack.Concat(fromGlobal);

                    var scorable = new TraitsScorable<IActivity, double>(c.Resolve<ITraits<double>>(), c.Resolve<IComparer<double>>(), lazyScorables);

                    return scorable;

                })

                .InstancePerLifetimeScope()

                .AsSelf();



            builder

                .RegisterType<NullActivityLogger>()

                .AsImplementedInterfaces()

                .SingleInstance();



            builder

                .Register(c =>

                {

                    var cc = c.Resolve<IComponentContext>();

                    Func<IPostToBot> makeInner = () =>

                    {

                        IPostToBot post = new ReactiveDialogTask(cc.Resolve<IDialogTask>(), cc.Resolve<Func<IDialog<object>>>());

                        post = new ExceptionTranslationDialogTask(post);

                        post = new LocalizedDialogTask(post);

                        post = new ScoringDialogTask<double>(post, cc.Resolve<TraitsScorable<IActivity, double>>());

                        return post;

                    };



                    IPostToBot outer = new PersistentDialogTask(makeInner, cc.Resolve<IBotData>());

                    outer = new SerializingDialogTask(outer, cc.Resolve<IAddress>(), c.Resolve<IScope<IAddress>>());

                    outer = new PostUnhandledExceptionToUserTask(outer, cc.Resolve<IBotToUser>(), cc.Resolve<ResourceManager>(), cc.Resolve<TraceListener>());

                    outer = new LogPostToBot(outer, cc.Resolve<IActivityLogger>());

                    return outer;

                })

                .As<IPostToBot>()

                .InstancePerLifetimeScope();



            builder

                .RegisterType<AlwaysSendDirect_BotToUser>()

                .AsSelf()

                .InstancePerLifetimeScope();



            builder

                .Register(c => new LogBotToUser(new MapToChannelData_BotToUser(

                    c.Resolve<AlwaysSendDirect_BotToUser>(),

                    new List<IMessageActivityMapper> { new KeyboardCardMapper() }), c.Resolve<IActivityLogger>()))

                .As<IBotToUser>()

                .InstancePerLifetimeScope();



        }

    }



    public sealed class MultiTenantDialogModule_MakeRoot : Module

    {

        protected override void Load(ContainerBuilder builder)

        {

            base.Load(builder);



            builder.RegisterModule(new MultiTenantDialogModule());



            // TODO: let dialog resolve its dependencies from container

            builder

                .Register((c, p) => p.TypedAs<Func<IDialog<object>>>())

                .AsSelf()

                .InstancePerMatchingLifetimeScope(MultiTenantDialogModule.LifetimeScopeTag);

        }



        public static void Register(ILifetimeScope scope, Func<IDialog<object>> MakeRoot)

        {

            // TODO: let dialog resolve its dependencies from container

            scope.Resolve<Func<IDialog<object>>>(TypedParameter.From(MakeRoot));

        }

    }
